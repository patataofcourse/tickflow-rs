### TICKFLOW2 / NEW TICKFLOW* SPECIFICATION ###
=> version 0.1.0 (unfinished)

* Tickflow2 and New Tickflow are working/wip names

first non-comment non-empty line must be a #new_tickflow directive (see directives section)

there's the following types of values:
- integers (decimal, hex, octal, or binary): 0, 1, 549023, 0x29A, 0o31536, 0b10110
- strings with an optional prefix u for utf-16 strings: "hello ascii", u"hello utf-16"
    - the following characters can be escaped with a backlash: \ "
    - newlines are represented with \n
    - other optional prefixes can be added
- arrays: [0, 1, 2], u16[5, 9, 65535], ["hello", "world"], i8[-127, 0, 127]
    - can contain any number of elements of one type
    - can contain strings or other arrays. example for RHDS:
        const epilogue_strings = [
            // Try Again
            [
                null, // JP
                "hello", // EN
                ...
            ],
            ...
        ]
- identifiers: must start with a letter or _. characters after that can also be numeric
    - identifiers can also refer to elements inside namespaces, like so: $namespace.$element
    - this can be nested as much as needed
    - keywords: reserved identifiers that cannot be used
        - true (constant equals to 1)
        - false (constant equals to 0)
        - null (constant equals to 0 that can overwrite a string or array)
        - sub
        - sync
        - const
        - if, if_eq, if_ne, if_gt, if_ge, if_lt, if_le
        - else
        - switch
        - case
        - default
        - command names are also treated as keywords for the sake of clarity

you can apply operations to integers:
- addition: a + b
- substraction: a - b
- multiplication: a * b
- integer division: a / b
- shift left: a << b
- shift right: a >> b
- bitwise AND: a & b
- bitwise OR: a | b
- bitwise XOR: a ^ b
- negation: -a
- bitwise NOT: ~a

statements usually take up a line, but can be terminated by a semicolon. you can add another statement after that semicolon, however, this is only recommended for commands.
lines can be empty
there's the following kinds of statements:
- directives
    - of the form #$name $($args )*
    - $name is specified by the directive definition
    - $args is feeded to the directive. args taken depends on the directive
    - the following directives exist:
        - #new_tickflow
            - required to be read as a Tickflow2 file
            - must be the first non-comment non-empty line in the file
        - #alias $name $signature
            - name: identifier to set the alias to
            - signature: command signature to set the alias to. $cmd $(<$arg0>)? $($argtypes),+
        - #include $filename
            - filename: string, name of the file to include
        - #index $index
            - index: default index to set this mod to target, for a generated mod manifest file. file must not be an includable
        - #name $name
            - name: name of the mod, for a generated mod manifest. file must not be an includable
        - #authors $authors
            - authors: array of names of mod authors, for a generated mod manifest. file must not be an includable
        - #description $description
            - description: description of the mod, for a generated mod manifest. file must not be an includable
        - #version $version
            - version: semver version of the mod, for a generated mod manifest. file must not be an includable
        - #includeme
            - specifies this file can be included and cannot be compiled standalone
        - #module $namespace
            - specifies this file can be included and cannot be compiled standalone
            - all its subs and constants will be included within a namespace called $namespace
        - #requires $version
            - version: semver version of the tickflow spec. needs to match to compile this file
            - if the version is x.y.z, where x != 0, the spec version needed by the compiler is:
                - x needs to match exactly
                - y needs to be greater or equal
                - z needs to be greater or equal if y is equal
            - if the version is 0.y.z, the spec version needed by the compiler is:
                - y needs to match exactly
                - z needs to be greater or equal
        - #tempo $id $samplerate
            - id: id for the tempo file this tempo will target
            - samplerate: optional, sample rate that the tempo file will work with
        - #endtempo
- subs: short for "subroutines", they contain all the actual tickflow bytecode
    - subs are declared with the keyword "sub", the name of the sub, and a pair of curly brackets {}, like so:
        sub $sub_name {
            $sub_contents
        }
    - before the keyword "sub", the keyword "sync" can be added to indicate that this sub is to be called synchronously, that is, without spawning a new thread
        * if the tickflow language implementation used ONLY supports synchronous/single-threaded execution, all subs must be declared as sync for clarity
    - the contents of the sub is a list of "command statements" and "syntactic statements", which work the same as any other statement, except they are specific to sub contents:
        - commands are the direct representation of tickflow, abstracted for easier understanding
            - they follow the syntax $name 
            - unlike old Tickflow, arg0s are not to be handled manually in Tickflow2. they are an argument just like any other, or are used to distinguish between two different commands
            - "old Tickflow-like" commands can be used with the "raw_opcode $val $(<$arg0>)? $($args),*" syntax, but val must be a numeric value, not a command definition
            - for commands undefined in the current implementation for a specific language, see the #alias directive
            - the language implementation can abstract these commands as much as it needs to make the language simple and easy to use. optionally, raw variants of these commands may be supplied
        - syntactic statements are the abstraction of some concepts commonly used in tickflow. if they do not exist or cannot be represented in a specific language, the implementation for it can manually disable them. examples are:
            * NOTE: since tickflow usually works with a conditional variable, condition-based statements work by applying a specific comparison to that specific variable and a given constant value
                - if this ever changes (for example, in a "Rhythm Heaven 5" which MUST STILL USE TICKFLOW), the spec may be updated
                - strings and arrays CANNOT be compared to each other unless the language SPECIFICALLY features string/array comparison
            - if / else if / else statements (including if_eq, if_ne, etc. variants)
                if $condition {
                    ...
                } else if_lt $condition {
                    ...
                } else {
                    ...
                }
            - switch / case statements
                switch {
                    case $condition:
                        ...
                        break
                    case $condition:
                        ...
                    case $condition:
                    case $condition:
                        ...
                        break
                    default:
                        ...
                }
                * the final case in the switch/case does not need to include a break statement
            - inconditional loops
                do $number_of_times {
                    ...
                }
                * this will expand the code inside the loop the specific amount of times required if the language does not include an inconditional loop function
                * do n {} MUST NOT alter the conditional variable, or at least must do so in a way that does not affect Tickflow execution
            - conditional loops (including while_eq, while_ne, etc. variants)
                while $condition {
                    ...
                }
                * this will repeat the code inside the loop until the conditional variable succeeds in the comparison
- constant definitions: TBD

TODO:
- port everything from the old spec
- new additions
- tickflow standard library